// Generated by Bisonc++ V6.04.04 on Tue, 27 Sep 2022 00:04:47 +0200

#ifndef HeaderParser_h_included
#define HeaderParser_h_included

// $insert baseclass
#include "header_parserbase.h"
// $insert scanner.h
#include "../scanner/scanner.h"


// $insert undefparser
#undef HeaderParser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to HeaderParser 
    // are read as HeaderParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.

#include "../header_data/header_data.h"
#include <iosfwd>


class HeaderParser: public HeaderParserBase
{
    // $insert scannerobject
    Scanner       d_scanner;
    HeaderData    d_headerData;
        
    public:
        HeaderParser(HeaderData& headerData, std::istream& headerStream);
        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction_(int ruleNr);
        void errorRecovery_();
        void nextCycle_();
        void nextToken_();
        void print_();
};


#endif
