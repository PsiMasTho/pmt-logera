// Generated by Flexc++ V2.11.01 on Fri, 07 Oct 2022 22:01:53 +0200

#ifndef LogScanner_H_INCLUDED_
#define LogScanner_H_INCLUDED_

// $insert baseclass_h
#include "log_scannerbase.h"

#include <filesystem>
#include "log_token_enums.h"

// $insert classHead
class log_scanner : public LogScannerBase {
public:
    explicit log_scanner(std::filesystem::path const& infile);

    // $insert lexFunctionDecl
    int lex();

private:
    int lex_();
    int executeAction_(size_t ruleNr);

    void print();
    void preCode(); // re-implement this function for code that must
        // be exec'ed before the patternmatching starts

    void postCode(PostEnum_ type);
    // re-implement this function for code that must
    // be exec'ed after the rules's actions.
};

inline log_scanner::log_scanner(std::filesystem::path const& infile)
    : LogScannerBase(infile, "-")
{
}

// $insert inlineLexFunction
inline int log_scanner::lex()
{
    return lex_();
}

inline void log_scanner::preCode()
{
    // optionally replace by your own code
}

inline void log_scanner::postCode([[maybe_unused]] PostEnum_ type)
{
    // optionally replace by your own code
}

inline void log_scanner::print()
{
    print_();
}

#endif // LogScanner_H_INCLUDED_
