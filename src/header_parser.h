// Generated by Bisonc++ V6.04.04 on Fri, 07 Oct 2022 23:06:16 +0200

#ifndef HeaderParser_h_included
#define HeaderParser_h_included

// $insert baseclass
#include "header_parserbase.h"
// $insert scanner.h
#include "header_scanner.h"

#include "parse_error.h"
#include <filesystem>
#include <fstream>
#include <iosfwd>
#include <optional>

struct header_data;
class header_parser_context;

class header_parser : public header_parser_base {

    // $insert scannerobject
    header_scanner d_scanner;
    std::string const& d_matched;

    header_parser_context& m_ctx;
    std::optional<parse_error> m_error_info;

public:
    explicit header_parser(std::filesystem::path const& path, header_parser_context& ctx);
    int parse();
    std::unique_ptr<header_data> gen();
    parse_error const& get_error_info() const;

private:
    void error(); // called on (syntax) errors
    int  lex(); // returns the next token from the
        // lexical scanner.
    void print(); // use, e.g., d_token, d_loc
    void exceptionHandler(std::exception const& exc);

    // support functions for parse():
    void executeAction_(int ruleNr);
    void errorRecovery_();
    void nextCycle_();
    void nextToken_();
    void print_();
};

#endif
