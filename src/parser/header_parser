//          Copyright (C) 2022 PsiMasTho (1cbb875@gmail.com)
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

%scanner ../lexer/lexed_buffer.h
%scanner-class-name lexed_buffer_walker
%scanner-token-function m_walker.advance()
%scanner-matched-text-function m_walker.get_cur_match()
%parsefun-source header_parser_base.cc
%token-class header_tokens
%token-path ../lexer/tokens.h

%baseclass-preinclude header_parser_base_preinclude.h

%token  DECL_VAR
        DECL_ATTR
        IDENT
        NEWLINE
        REGEX

%polymorphic STATEMENT_NODE:  header_statement_node;
             DECL_VAR_NODE:   header_decl_var_node;
             DECL_ATTR_NODE:  header_decl_attr_node;
             IDENTIFIER_NODE: header_identifier_node;
             REGEX_NODE:      header_regex_node;

%type <STATEMENT_NODE>             statement;
%type <DECL_VAR_NODE>              declare_variable;
%type <DECL_ATTR_NODE>             declare_attribute;
%type <IDENTIFIER_NODE>            identifier;
%type <REGEX_NODE>                 regex;

%%

input:
    // empty
|
    input statement
    {
        std::get<header_root_node>(m_ast).children.push_back($2);
    }
|
    input NEWLINE
|
    input EOF
    {
        ACCEPT();
    }
;

statement:
    declare_attribute
    {
        $$ = header_statement_node{};
        $$.children.push_back($1);
    }
|
    declare_variable
    {
        $$ = header_statement_node{};
        $$.children.push_back($1);
    }
;

declare_attribute:
    DECL_ATTR identifier ';'
    {
        $$ = header_decl_attr_node{};
        $$.children.push_back($2);
    }
|
    declare_attribute regex ';'
    {
        $1.children.push_back($2);
        $$ = $1;
    }
;

declare_variable:
    DECL_VAR identifier ';'
    {
        $$ = header_decl_var_node{};
        $$.children.push_back($2);
    }
|
    declare_variable identifier ';'
    {
        $1.children.push_back($2);
        $$ = $1;
    }
;

regex:
    REGEX
    {
        $$ = header_regex_node{};
        $$.token_rec_idx = m_walker.get_cur_token_record_idx();
    }
;

identifier:
    IDENT
    {
        $$ = header_identifier_node{};
        $$.token_rec_idx = m_walker.get_cur_token_record_idx();
    }
;