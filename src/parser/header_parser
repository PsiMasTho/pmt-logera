//          Copyright (C) 2022 PsiMasTho (1cbb875@gmail.com)
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

%scanner ../lexer/lexed_buffer.h
%scanner-class-name lexed_buffer_walker
%scanner-token-function m_walker.advance()
%scanner-matched-text-function m_walker.get_cur_match()
%parsefun-source header_parser_base.cc
%token-class header_tokens
%token-path ../lexer/tokens.h

%baseclass-preinclude header_parser_base_preinclude.h

%token  DECL_VAR
        DECL_ATTR
        IDENT
        NEWLINE
        REGEX

%stype u32

%%

input:
    // empty
|
    input statement
    {
        // Add this statement to the root node
        m_ast.add_child(0, $2);
    }
|
    input NEWLINE
|
    input EOF
    {
        ACCEPT();
    }
;

statement:
    declare_attribute 
|
    declare_variable
;

declare_attribute:
    DECL_ATTR identifier ';'
    {
        auto const this_location = m_walker.get_cur_token_record_source_location();
        auto const this_node = ast_node{this_location, static_cast<u8>(header_node_enum::DECL_ATTR)};
        auto const this_idx = m_ast.add_node(this_node);

        m_ast.add_child(this_idx, $2);

        $$ = this_idx;
    }
|
    declare_attribute regex ';'
    {
        m_ast.add_child($1, $2);
        $$ = $1;
    }
;

declare_variable:
    DECL_VAR identifier ';'
    {
        auto const this_location = m_walker.get_cur_token_record_source_location();
        auto const this_node = ast_node{this_location, static_cast<u8>(header_node_enum::DECL_VAR)};
        auto const this_idx = m_ast.add_node(this_node);

        m_ast.add_child(this_idx, $2);

        $$ = this_idx;
    }
|
    declare_variable identifier ';'
    {
        m_ast.add_child($1, $2);
        $$ = $1;
    }
;

regex:
    REGEX
    {
        auto const this_location = m_walker.get_cur_token_record_source_location();
        auto const this_node = ast_node{this_location, static_cast<u8>(header_node_enum::REGEX)};
        auto const this_idx = m_ast.add_node(this_node);

        $$ = this_idx;
    }
;

identifier:
    IDENT
    {
        auto const this_location = m_walker.get_cur_token_record_source_location();
        auto const this_node = ast_node{this_location, static_cast<u8>(header_node_enum::IDENTIFIER)};
        auto const this_idx = m_ast.add_node(this_node);

        $$ = this_idx;
    }
;