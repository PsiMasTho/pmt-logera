//          Copyright (C) 2022 PsiMasTho (1cbb875@gmail.com)
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

%scanner ../lexer/lexed_buffer.h
%scanner-class-name lexed_buffer_walker
%scanner-token-function m_walker.advance()
%scanner-matched-text-function m_walker.get_cur_match()
%parsefun-source log_parser_base.cc
%token-class log_tokens
%token-path ../lexer/tokens.h

%expect 1 // 1 error expected

//%debug

%baseclass-preinclude log_parser_base_preinclude.h

%token  IDENT
        NEWLINE
        DATE
        IDENT_VALUE_PAIR

%polymorphic STATEMENT_NODE:             log_statement_node;
             DATE_NODE:                  log_date_node;
             VARIABLE_NODE:              log_variable_node;
             IDENTIFIER_NODE:            log_identifier_node;
             IDENT_VALUE_PAIR_NODE:      log_ident_value_pair_node;
             IDENT_VALUE_PAIR_LIST_NODE: log_ident_value_pair_list_node;

%type <STATEMENT_NODE>             statement;
%type <DATE_NODE>                  date;
%type <VARIABLE_NODE>              variable;
%type <IDENTIFIER_NODE>            identifier;
%type <IDENT_VALUE_PAIR_NODE>      ident_value_pair;
%type <IDENT_VALUE_PAIR_LIST_NODE> ident_value_pair_list;

%%

input:
    // empty
|
    input statement
    {
        std::get<log_root_node>(m_ast).children.push_back($2);
    }
|
    input NEWLINE
|
    input EOF
    {
        ACCEPT();
    }
;

statement:
    date
    {
        $$ = log_statement_node{};
        $$.children.push_back($1);
    }
|
    variable
    {
        $$ = log_statement_node{};
        $$.children.push_back($1);
    }
|
    ident_value_pair_list
    {
        $$ = log_statement_node{};
        $$.children.push_back($1);
    }
;

ident_value_pair_list:
    ident_value_pair ';'
    {
        $$ = log_ident_value_pair_list_node{};
        $$.children.push_back($1);
    }
|
    ident_value_pair_list ident_value_pair ';'
    {
        $1.children.push_back($2);
        $$ = $1;
    }
;

variable:
    identifier ':'
    {
        $$ = log_variable_node{};
        $$.children.push_back($1);
    }
;

identifier:
    IDENT
    {
        $$ = log_identifier_node{};
        $$.token_rec_idx = m_walker.get_cur_token_record_idx();
    }
;

date:
    DATE
    {
        $$ = log_date_node{};
        $$.token_rec_idx = m_walker.get_cur_token_record_idx();
    }
;

ident_value_pair:
    IDENT_VALUE_PAIR
    {
        $$ = log_ident_value_pair_node{};
        $$.token_rec_idx = m_walker.get_cur_token_record_idx();
    }
;