//          Copyright (C) 2022 PsiMasTho (1cbb875@gmail.com)
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

%scanner ../lexer/lexed_file.h
%scanner-class-name lexed_file_walker
%scanner-token-function m_walker.advance()
%scanner-matched-text-function m_walker.get_cur_match()
%parsefun-source log_parser_base.cc
%token-class log_tokens
%token-path ../lexer/tokens.h

%baseclass-preinclude log_parser_base_preinclude.h

%token  IDENT
        NEWLINE
        DATE
        IDENT_VALUE_PAIR

%polymorphic    OFFSET_T:                   uint32_t;
                DATE_NODE:                  date_node;
                VARIABLE_NODE:              variable_node;
                IDENT_VALUE_PAIR_NODE:      ident_value_pair_node;
                IDENT_VALUE_PAIR_LIST_NODE: ident_value_pair_list_node;
                LOG_FILE_NODE:              log_file_node;

%type <IDENT_VALUE_PAIR_NODE>      ident_value_pair;
%type <IDENT_VALUE_PAIR_LIST_NODE> ident_value_pair_list;
%type <OFFSET_T>                   variable;
%type <OFFSET_T>                   identifier;
%type <DATE_NODE>                  date;
%type <LOG_FILE_NODE>              statement;

%%

input:
    // empty
|
    input statement
    {
        // ignore newline and eof nodes
        if (std::holds_alternative<newline_node>($2) || std::holds_alternative<eof_node>($2))
            return;

        m_ast.m_nodes.push_back($2);
    }
;

// todo: the extra production rules for EOF are hacky but work for now
statement:
    date NEWLINE
    {
        log_file_node const lfn = date_node{$1};
        $$ = lfn;
    }
|
    date EOF
    {
        log_file_node const lfn = date_node{$1};
        $$ = lfn;
    }
|
    variable
    {
        log_file_node const lfn = variable_node{$1};
        $$ = lfn;
    }
|
    ident_value_pair_list NEWLINE
    {
        log_file_node const lfn = ident_value_pair_list_node{$1};
        $$ = lfn;
    }
|
    ident_value_pair_list EOF
    {
        log_file_node const lfn = ident_value_pair_list_node{$1};
        $$ = lfn;
    }
|
    NEWLINE
    {
        auto const offset = m_walker.get_cur_token_record_offset();
        log_file_node const lfn = newline_node{offset};
        $$ = lfn;
    }
|
    EOF
    {
        auto const offset = m_walker.get_cur_token_record_offset();
        log_file_node const lfn = eof_node{offset};
        $$ = lfn;
        ACCEPT();
    }
;

ident_value_pair_list:
    ident_value_pair ';'
    {
        $$ = ident_value_pair_list_node{};
        $$.m_pairs.push_back($1);
    }
|
    ident_value_pair_list ident_value_pair ';'
    {
        $$ = $1;
        $$.m_pairs.push_back($2);
    }
;

variable:
    identifier ':'
    {
        $$ = $1;
    }
;

identifier:
    IDENT
    {
        auto const offset = m_walker.get_cur_token_record_offset();
        $$ = offset;
    }
;

date:
    DATE
    {
        auto const offset = m_walker.get_cur_token_record_offset();
        $$ = date_node{offset};
    }
;

ident_value_pair:
    IDENT_VALUE_PAIR
    {
        auto const offset = m_walker.get_cur_token_record_offset();
        $$ = ident_value_pair_node{offset};
    }
;