// Generated by Bisonc++ V6.04.04 on Sat, 24 Sep 2022 12:09:44 +0200

#ifndef LogParser_h_included
#define LogParser_h_included

// $insert baseclass
#include "log_parserbase.h"
// $insert scanner.h
#include "../log_scanner/log_scanner.h"


// $insert undefparser
#undef LogParser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to LogParser 
    // are read as LogParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.

#include <iosfwd>

class LogParser: public LogParserBase
{
    // $insert scannerobject
    LogScanner d_scanner;
        
    public:
        LogParser(std::istream& in);
        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction_(int ruleNr);
        void errorRecovery_();
        void nextCycle_();
        void nextToken_();
        void print_();
};


#endif
