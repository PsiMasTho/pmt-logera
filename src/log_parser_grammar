//          Copyright (C) 2022 PsiMasTho (1cbb875@gmail.com)
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

%scanner log_scanner.h
%scanner-class-name log_scanner
%parsefun-source log_parser_parse.cc

%baseclass-preinclude log_parser_base_preinclude.h

%token IDENT
       DATE
       NEWLINE

%polymorphic STRING:              std::string;
             STRING_PAIR:         std::pair<std::string, std::string>;
             LOG_DATE:            log_date;
             SPARSE_ARRAY_STRING: std::optional<sparse_array<std::string>>;

%type <STRING>              identifier;
%type <STRING>              variable;
%type <STRING_PAIR>         attr_value_pair;
%type <LOG_DATE>            date;
%type <SPARSE_ARRAY_STRING> attr_value_arr;

%%

input:
    // empty
|
    input statement
;

// todo: the extra production rules for EOF are hacky but work for now
statement:
    date NEWLINE
    {
        m_ctx.set_date($1);
    }
|
    date EOF
    {
        m_ctx.set_date($1);
        m_ctx.at_eof();
        ACCEPT();
    }
|
    variable NEWLINE
    {
        m_ctx.set_active_variable_or_throw($1);
    }
|
    variable EOF
    {
        m_ctx.set_active_variable_or_throw($1);
        m_ctx.at_eof();
        ACCEPT();
    }
|
    attr_value_arr NEWLINE
    {
        m_ctx.create_entry_or_throw($1.value());
    }
|
    attr_value_arr EOF
    {
        m_ctx.create_entry_or_throw($1.value());
        m_ctx.at_eof();
        ACCEPT();
    }
|
    NEWLINE
|
    EOF
    {
        m_ctx.at_eof();
        ACCEPT();
    }
;

attr_value_pair:
    identifier identifier ';'
    {
        $$ = make_pair($1, $2);
    }
;

attr_value_arr:
    attr_value_pair
    {
        $$ = m_ctx.make_attr_value_arr_or_throw($1);
    }
|
    attr_value_arr attr_value_pair
    {
        m_ctx.update_attr_value_arr_or_throw($1.value(), $2);
        $$ = $1;
    }
;

variable:
    identifier ':'
    {
        $$ = $1;
    }
;

identifier:
    IDENT
    {
        $$ = d_scanner.matched();
    }
;

date:
    DATE
    {
        $$ = log_date{d_scanner.matched()};
    }
;