// Generated by Bisonc++ V6.04.04 on Fri, 07 Oct 2022 23:03:09 +0200

#ifndef LogParser_h_included
#define LogParser_h_included

// $insert baseclass
#include "log_parserbase.h"
// $insert scanner.h
#include "log_scanner.h"

#include "log_data_modifier.h"
#include "log_scanner.h"
#include "input_error.h"

#include <fstream>
#include <filesystem>
#include <optional>

class log_parser : public log_parser_base {

    // $insert scannerobject
    LogScanner d_scanner;
    std::string const& d_matched;
    log_data_modifier d_logDataModifier;
    std::unique_ptr<log_data> d_ret;
    std::optional<input_error> d_errorInfo;

public:
    log_parser(std::filesystem::path const& path, header_data const& hd);
    int parse();
    std::unique_ptr<log_data> gen();
    input_error const& getErrorInfo() const;

private:
    void error(); // called on (syntax) errors
    int  lex(); // returns the next token from the
        // lexical scanner.
    void print(); // use, e.g., d_token, d_loc
    void exceptionHandler(std::exception const& exc);

    // support functions for parse():
    void executeAction_(int ruleNr);
    void errorRecovery_();
    void nextCycle_();
    void nextToken_();
    void print_();
};

#endif
