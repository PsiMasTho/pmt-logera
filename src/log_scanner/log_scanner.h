// Generated by Flexc++ V2.11.01 on Sat, 24 Sep 2022 12:00:33 +0200

#ifndef LogScanner_H_INCLUDED_
#define LogScanner_H_INCLUDED_

// $insert baseclass_h
#include "log_scannerbase.h"

// $insert classHead
class LogScanner: public LogScannerBase
{
    public:
        #include "log_tokens.hi"

        explicit LogScanner(std::istream &in = std::cin, std::ostream &out = std::cout, bool keepCwd = true);

        LogScanner(std::string const &infile, std::string const &outfile, bool keepCwd = true);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline LogScanner::LogScanner(std::istream &in, std::ostream &out, bool keepCwd)
:
    LogScannerBase(in, out, keepCwd)
{}

inline LogScanner::LogScanner(std::string const &infile, std::string const &outfile, bool keepCwd)
:
    LogScannerBase(infile, outfile, keepCwd)
{}

// $insert inlineLexFunction
inline int LogScanner::lex()
{
    return lex_();
}

inline void LogScanner::preCode() 
{
    // optionally replace by your own code
}

inline void LogScanner::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void LogScanner::print() 
{
    print_();
}


#endif // LogScanner_H_INCLUDED_

