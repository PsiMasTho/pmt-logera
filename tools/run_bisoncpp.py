#!/bin/python3

# Note: This script will also output bisonc++ warnings if there are any

import argparse
import os
import subprocess
import tempfile
import glob

def replace_str_in_file(file, old, new):
	with open(file, "r") as f:
		filedata = f.read()
	filedata = filedata.replace(old, new)
	with open(file, "w") as f:
		f.write(filedata)

def replace_str_in_files(file_list, old, new):
	for file in file_list:
		replace_str_in_file(file, old, new)

def run_bisoncpp(output_dir):
	bisoncpp_args =  [f"../src/parser/parser",
					  f"--filenames=parser", 
					  "--no-lines", 
					  f"--class-name=parser", 
					  f"--target-directory={output_dir}"]
	
	bisoncpp_args = " ".join(bisoncpp_args)
	return os.system("bisonc++ " + bisoncpp_args)

def main(args):
	temp_dir = tempfile.TemporaryDirectory(dir=args.root_dir)
	print("Temporary directory created at: " + temp_dir.name)

	# Run bisonc++ for header grammar first
	if run_bisoncpp(temp_dir.name) != 0:
		print("Error running bisonc++.")
		exit(1)
	else:
		print("Successfully ran bisonc++.")

	
	# Rename files to snake case
	os.rename(temp_dir.name + "/parserbase.h", temp_dir.name + "/parser_base.h")

	# Rename base class to snake case
	replace_str_in_files(glob.glob(temp_dir.name + "/*.h") + glob.glob(temp_dir.name + "/*.cc"), "parserBase", "parser_base")

	# Replace d_ member prefix to m_
	replace_str_in_files(glob.glob(temp_dir.name + "/*.h") + glob.glob(temp_dir.name + "/*.cc"), "d_scanner", "m_lexer")
	replace_str_in_files(glob.glob(temp_dir.name + "/*.h") + glob.glob(temp_dir.name + "/*.cc"), "d_matched", "m_matched")

	# Replace .ih include to .h
	replace_str_in_file(temp_dir.name + "/parser_base.cc", "parser.ih", "parser.h")

	output_dir = args.root_dir + "/src/parser/"

	# Move the non-interface files to the src directory
	os.replace(temp_dir.name + "/parser_base.h", output_dir + "/parser_base.h")
	os.replace(temp_dir.name + "/parser_base.cc", output_dir + "/parser_base.cc")

	# Remove tokens.h from lexer/ if it was autogenerated
	if os.path.isfile(args.root_dir + "/lexer/tokens.h"):
		os.remove(args.root_dir + "/lexer/tokens.h")

	# remove lexer/ if it was autogenerated
	if os.path.isdir(args.root_dir + "/lexer/"):
		os.rmdir(args.root_dir + "/lexer/")

	print("Done.")
	

def validate_args(args):
	if args.root_dir is None:
		print("Root directory is not specified.")
		exit(1)
	if not os.path.isdir(args.root_dir):
		print("Root directory is not a directory.")
		exit(1)
	if not os.path.isdir(args.root_dir + "/src/"):
		print("Root directory does not contain a src directory.")
		exit(1)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Generate bisonc++ files.")
	parser.add_argument("--root-dir", help="Root directory of the project.")

	# Check if the root directory is valid.
	args = parser.parse_args()
	validate_args(args)
	main(args)